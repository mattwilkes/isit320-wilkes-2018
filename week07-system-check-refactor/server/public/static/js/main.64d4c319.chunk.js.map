{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","copyScript","fetch","then","response","json","console","log","catch","ex","handleChange","event","selectedValue","target","value","_this","setState","Object","objectSpread","state","handleSubmit","allData","runCpuInfo","preventDefault","radioWeb","react_default","a","createElement","className","onSubmit","this","type","name","id","onChange","htmlFor","onClick","runFoo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAuEeA,oNAnEXC,WAAa,WACTC,MAAM,8BACDC,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAASE,GACXC,QAAQC,IAAI,cAAeF,KAE9BG,MAAM,SAASC,GACZH,QAAQC,IAAI,oDAAqDE,QAG7EC,aAAe,SAACC,GACZ,IAAMC,EAAgBD,EAAME,OAAOC,MACnCR,QAAQC,IAAI,gBAAiBK,GAC7BG,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACOF,EAAKI,MADZ,CAEIP,cAAeA,QAKvBQ,aAAc,SAACT,GACXI,EAAKC,SAAS,CAACK,QAAS,KACxBf,QAAQC,IAAI,yBAA2BQ,EAAKI,OAE5CJ,EAAKO,WAAWP,EAAKI,MAAMP,eAE3BD,EAAMY,0FAGN,IAAMC,EACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKV,cAEjBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,aAAalB,MAAM,UAAUmB,GAAG,gBAAgBC,SAAUJ,KAAKpB,eACxFe,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,iBAAf,WAEAV,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,KAAK,aAAalB,MAAM,eAAemB,GAAG,oBAAoBC,SAAUJ,KAAKpB,eACjGe,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,qBAAf,iBAGJV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASH,UAAU,mBAAhC,wBAKhB,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,eACKH,GAELC,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,WAAMG,KAAKX,MAAME,UAErBI,EAAAC,EAAAC,cAAA,UAAQS,QAASN,KAAKO,QAAtB,qBA5DNC,cCSEC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GAC/BA,EAAaC","file":"static/js/main.64d4c319.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    copyScript = () => {\n        fetch('/script-pusher/copy-script')\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('parsed json', json);\n            })\n            .catch(function(ex) {\n                console.log('parsing failed, URL bad, network down, or similar', ex);\n            });\n    };\n    handleChange = (event) => {\n        const selectedValue = event.target.value;\n        console.log('HANDLE CHANGE', selectedValue);\n        this.setState({\n            ...this.state,\n            selectedValue: selectedValue\n        });\n\n    };\n\n    handleSubmit= (event) => {\n        this.setState({allData: ''});\n        console.log('A name was submitted: ' , this.state);\n        //if (this.state.selectedValue === 'cpu') {\n        this.runCpuInfo(this.state.selectedValue);\n        //}\n        event.preventDefault();\n    };\n    render() {\n        const radioWeb =  (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} >\n\n                    <div className=\"elf-form-field\" >\n                        <input type=\"radio\" name=\"app-choice\" value=\"CpuInfo\" id=\"elf-radio-cpu\" onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-cpu\">CpuInfo</label>\n\n                        <input type=\"radio\" name=\"app-choice\" value=\"VersionCheck\" id=\"elf-radio-version\" onChange={this.handleChange}/>\n                        <label htmlFor=\"elf-radio-version\">Version Info</label>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary\">Run System Script</button>\n                    </div>\n                </form>\n            </div>\n        );\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <main>\n                        <section>\n                            {radioWeb}\n                        </section>\n                        <section>\n                            <pre>{this.state.allData}</pre>\n                        </section>\n                        <button onClick={this.runFoo}>Run Foo</button>\n                    </main>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}