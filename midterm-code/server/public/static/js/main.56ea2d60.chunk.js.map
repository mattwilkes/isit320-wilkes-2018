{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","copyScript","fetch","then","response","json","console","log","catch","ex","runScript","path","script","that","assertThisInitialized","allData","result","code","error","info","regex1","RegExp","array1","exec","concat","setState","callCpuInfo","JSON","stringify","handleChange","event","selectedValue","target","value","endPointIndex","getAttribute","objectSpread","state","handleSubmit","dataEndPoints","preventDefault","radioWeb","react_default","a","createElement","className","onSubmit","type","name","data-endpoint","id","onChange","htmlFor","onClick","runFoo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QA0KeA,qBAtKX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYVQ,WAAa,WACTC,MAAM,8BACDC,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAASE,GACXC,QAAQC,IAAI,cAAeF,KAE9BG,MAAM,SAASC,GACZH,QAAQC,IACJ,oDACAE,MAxBGf,EA6BnBgB,UAAY,SAACC,EAAMC,GACf,IAAMC,EAAIlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,IACLkB,GAGLV,MAAMS,EAAOC,GACRT,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAASE,GACXC,QAAQC,IAAI,UAAWF,EAAKU,SAC5BT,QAAQC,IAAI,SAAUF,EAAKW,QAC3BV,QAAQC,IAAI,OAAQF,EAAKY,MACzBX,QAAQC,IAAI,QAASF,EAAKa,OAC1B,IAAIC,EAAO,GACX,GAAoB,UAAhBd,EAAKW,OACLG,EAAOd,EAAKa,WACT,GAAe,YAAXN,EAGP,IAFA,IAAIQ,EAASC,OAAO,eAAgB,KAChCC,EAASF,EAAOG,KAAKlB,EAAKU,SACZ,OAAXO,GACHH,GAAQG,EAAO,GAAK,KACpBhB,QAAQC,IAAR,SAAAiB,OAAqBF,EAAO,GAA5B,MACAA,EAASF,EAAOG,KAAKlB,EAAKU,cAG9BI,EAAOd,EAAKU,QAEhBF,EAAKY,SAAS,CAAEV,QAASI,MAE5BX,MAAM,SAASC,GACZH,QAAQC,IACJ,oDACAE,MA9DGf,EAkEnBgC,YAAc,WACVxB,MAAM,kBACDC,KAAK,SAASC,GACX,OAAOA,EAASC,SAEnBF,KAAK,SAASE,GACXC,QAAQC,IAAI,oBAAqBF,KAEpCG,MAAM,SAASC,GACZH,QAAQC,IACJ,sEAEJD,QAAQC,IAAIoB,KAAKC,UAAUnB,EAAI,KAAM,OA9E9Bf,EAiFnBmC,aAAe,SAAAC,GACX,IAAMC,EAAgBD,EAAME,OAAOC,MAC7BC,EAAgBJ,EAAME,OAAOG,aAAa,iBAChD7B,QAAQC,IAAI,gBAAiBwB,GAC7BrC,EAAK+B,SAAL9B,OAAAyC,EAAA,EAAAzC,CAAA,GACOD,EAAK2C,MADZ,CAEIN,cAAeA,EACfG,cAAeA,MAxFJxC,EA4FnB4C,aAAe,SAAAR,GACXpC,EAAK+B,SAAS,CAAEV,QAAS,KACzBT,QAAQC,IAAI,yBAA0Bb,EAAK2C,OAC3C3C,EAAKgB,UACDhB,EAAK6C,cAAc7C,EAAK2C,MAAMH,eAC9BxC,EAAK2C,MAAMN,eAEfD,EAAMU,kBAjGN9C,EAAK6C,cAAgB,CACjB,oCACA,0CAEJ7C,EAAK2C,MAAQ,CACTtB,QAAS,GACTgB,cAAe,GACfG,cAAe,GATJxC,wEAuGf,IAAM+C,EACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAME,SAAUjD,KAAKyC,cACjBI,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SACIG,KAAK,QACLC,KAAK,aACLC,gBAAc,IACdhB,MAAM,UACNiB,GAAG,gBACHC,SAAUtD,KAAKgC,eAEnBa,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,iBAAf,WAEAV,EAAAC,EAAAC,cAAA,SACIG,KAAK,QACLC,KAAK,aACLC,gBAAc,IACdhB,MAAM,eACNiB,GAAG,oBACHC,SAAUtD,KAAKgC,eAEnBa,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,qBAAf,gBAGAV,EAAAC,EAAAC,cAAA,SACIG,KAAK,QACLC,KAAK,aACLC,gBAAc,IACdhB,MAAM,SACNiB,GAAG,gBACHC,SAAUtD,KAAKgC,eAEnBa,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,iBAAf,WAGJV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,mBAAhC,yBAQpB,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,eAAUH,GACVC,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,WAAM/C,KAAKwC,MAAMtB,UAErB2B,EAAAC,EAAAC,cAAA,UAAQS,QAASxD,KAAKyD,QAAtB,qBA/JNC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjE,KAAK,SAAAkE,GACjCA,EAAaC","file":"static/js/main.56ea2d60.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.dataEndPoints = [\n            '/script-pusher/run-script?script=',\n            '/script-pusher/run-system-tool?script='\n        ];\n        this.state = {\n            allData: '',\n            selectedValue: '',\n            endPointIndex: 0\n        };\n    }\n\n    copyScript = () => {\n        fetch('/script-pusher/copy-script')\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('parsed json', json);\n            })\n            .catch(function(ex) {\n                console.log(\n                    'parsing failed, URL bad, network down, or similar',\n                    ex\n                );\n            });\n    };\n\n    runScript = (path, script) => {\n        const that = this;\n        if (!script) {\n            return;\n        }\n        fetch(path + script)\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('allData', json.allData);\n                console.log('result', json.result);\n                console.log('code', json.code);\n                console.log('error', json.error);\n                let info = '';\n                if (json.result === 'error') {\n                    info = json.error;\n                } else if (script === 'CpuInfo') {\n                    var regex1 = RegExp('model name.*', 'g');\n                    let array1 = regex1.exec(json.allData);\n                    while (array1 !== null) {\n                        info += array1[0] + '\\n';\n                        console.log(`Found ${array1[0]}.`);\n                        array1 = regex1.exec(json.allData);\n                    }\n                } else {\n                    info = json.allData;\n                }\n                that.setState({ allData: info });\n            })\n            .catch(function(ex) {\n                console.log(\n                    'parsing failed, URL bad, network down, or similar',\n                    ex\n                );\n            });\n    };\n    callCpuInfo = () => {\n        fetch('/call-cpu-info')\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('JSON from server:', json);\n            })\n            .catch(function(ex) {\n                console.log(\n                    'parsing failed, error on server, URL bad, network down, or similar'\n                );\n                console.log(JSON.stringify(ex, null, 4));\n            });\n    };\n    handleChange = event => {\n        const selectedValue = event.target.value;\n        const endPointIndex = event.target.getAttribute('data-endpoint');\n        console.log('HANDLE CHANGE', selectedValue);\n        this.setState({\n            ...this.state,\n            selectedValue: selectedValue,\n            endPointIndex: endPointIndex\n        });\n    };\n\n    handleSubmit = event => {\n        this.setState({ allData: '' });\n        console.log('A name was submitted: ', this.state);\n        this.runScript(\n            this.dataEndPoints[this.state.endPointIndex],\n            this.state.selectedValue\n        );\n        event.preventDefault();\n    };\n\n    render() {\n        const radioWeb = (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                    <fieldset>\n                        <div className=\"elf-form-field\">\n                            <legend>Services</legend>\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"0\"\n                                value=\"CpuInfo\"\n                                id=\"elf-radio-cpu\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-radio-cpu\">CpuInfo</label>\n\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"0\"\n                                value=\"VersionCheck\"\n                                id=\"elf-radio-version\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-radio-version\">\n                                Version Info\n                            </label>\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"0\"\n                                value=\"Uptime\"\n                                id=\"elf-radio-cpu\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-radio-cpu\">Uptime</label>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Run System Script\n                            </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </div>\n        );\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <main>\n                        <section>{radioWeb}</section>\n                        <section>\n                            <pre>{this.state.allData}</pre>\n                        </section>\n                        <button onClick={this.runFoo}>Run Foo</button>\n                    </main>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}